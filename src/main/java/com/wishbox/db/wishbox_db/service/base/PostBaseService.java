/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5dcb97a2f1ef4518a5382d3c
*
* You will get 10% discount for each one of your friends
* 
*/
package com.wishbox.db.wishbox_db.service.base;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Service;

import com.wishbox.db.wishbox_db.entity.Post;
import com.wishbox.db.wishbox_db.service.PostService;

//IMPORT RELATIONS
import com.wishbox.db.wishbox_db.entity.User;
import com.wishbox.db.wishbox_db.entity.Tag;

@Service
public class PostBaseService {

	private static NamedParameterJdbcTemplate jdbcTemplate;
	
		@Autowired
	public void setDataSource(DataSource dataSource) {
		jdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
	}
	


    //CRUD METHODS
    
    //CRUD - CREATE
    	
	public Post insert(Post obj) {
		Long id = jdbcTemplate.queryForObject("select max(_id) from `post`", new MapSqlParameterSource(), Long.class);
		obj.set_id(id == null ? 1 : id + 1);
		String sql = "INSERT INTO `post` (`_id`, `contents`,`createdAt`,`isPublic`,`title`,`updatedAt`,`createdBy`) VALUES (:id,:contents,:createdAt,:isPublic,:title,:updatedAt, :createdBy )";
			SqlParameterSource parameters = new MapSqlParameterSource()
		    .addValue("id", obj.get_id())
			.addValue("contents", obj.getContents())
			.addValue("createdAt", obj.getCreatedAt())
			.addValue("isPublic", obj.getIsPublic())
			.addValue("title", obj.getTitle())
			.addValue("updatedAt", obj.getUpdatedAt())
			.addValue("createdBy", obj.getCreatedBy());
		
		jdbcTemplate.update(sql, parameters);
		return obj;
	}
	
    	
    //CRUD - REMOVE
    
	public void delete(Long id) {
		String sql = "DELETE FROM `Post` WHERE `_id`=:id";
		SqlParameterSource parameters = new MapSqlParameterSource()
			.addValue("id", id);
		
		String sql_tags = "DELETE FROM `post_tags` WHERE `id_Post`= :id";
		jdbcTemplate.update(sql_tags, parameters);
		jdbcTemplate.update(sql, parameters);
	}

    	
    //CRUD - FIND BY CreatedBy
    	
	public List<Post> findBycreatedBy(Long idcreatedBy) {
		
		String sql = "select * from `Post` WHERE `createdBy` = :idcreatedBy";
		
	    SqlParameterSource parameters = new MapSqlParameterSource()
		.addValue("idcreatedBy", idcreatedBy);
	    
	    return jdbcTemplate.query(sql, parameters, new BeanPropertyRowMapper(Post.class));
	}
    	
    //CRUD - FIND BY Tags
    	
	public List<Post> findBytags(Long idtags) {
		
        String sql = "select * from `Post` WHERE `_id` IN (SELECT `id_Post` FROM `Post_tags` WHERE `id_Tag` = :idtags)";
		
	    SqlParameterSource parameters = new MapSqlParameterSource()
		.addValue("idtags", idtags);
	    
	    return jdbcTemplate.query(sql, parameters, new BeanPropertyRowMapper(Post.class));
	}
    	
    //CRUD - GET ONE
    	
	public Post get(Long id) {
	    
		String sql = "select * from `Post` where `_id` = :id";
		
	    SqlParameterSource parameters = new MapSqlParameterSource()
			.addValue("id", id);
	    
	    return (Post) jdbcTemplate.queryForObject(sql, parameters, new BeanPropertyRowMapper(Post.class));
	}


    	
        	
    //CRUD - GET LIST
    	
	public List<Post> getList() {
	    
		String sql = "select * from `Post`";
		
	    SqlParameterSource parameters = new MapSqlParameterSource();
	    return jdbcTemplate.query(sql, parameters, new BeanPropertyRowMapper(Post.class));
	    
	    
	}

    	
    //CRUD - EDIT
    	
	public Post update(Post obj, Long id) {

		String sql = "UPDATE `Post` SET `contents` = :contents,`createdAt` = :createdAt,`isPublic` = :isPublic,`title` = :title,`updatedAt` = :updatedAt , `createdBy` = :createdBy  WHERE `_id`=:id";
		SqlParameterSource parameters = new MapSqlParameterSource()
			.addValue("id", id)
			.addValue("contents", obj.getContents())
			.addValue("createdAt", obj.getCreatedAt())
			.addValue("isPublic", obj.getIsPublic())
			.addValue("title", obj.getTitle())
			.addValue("updatedAt", obj.getUpdatedAt())
			.addValue("createdBy", obj.getCreatedBy());
		jdbcTemplate.update(sql, parameters);
	    return obj;
	}
	
    	
    
    
    
        
    
    // External relation m:m tags
    public static class Post_tagsService {

    	public static ArrayList<Long> findBy_Post(Long id_Post) {
    		String sql = "select `id_Tag` from Post_tags WHERE `id_Post`=:id_Post";
    		SqlParameterSource parameters = new MapSqlParameterSource()
    			.addValue("id_Post", id_Post);
    	    
    	    List<Long> listId = jdbcTemplate.queryForList(sql, parameters, Long.class);
    		return (ArrayList<Long>) listId;
    	}
    	

    	public static void updateRelation(Long id_Post, ArrayList<Long> tags) {

    		// Delete not in array
    		String in = " and `id_Tag` NOT IN (:tags)";
    		String sql = "DELETE FROM Post_tags WHERE `id_Post`=:id_Post ";
    		
    		if (tags != null && tags.size() > 0)
    			sql = sql + in;
    			
    		SqlParameterSource parameters = new MapSqlParameterSource()
    			.addValue("id_Post", id_Post)
    			.addValue("tags", tags);
    		
    		jdbcTemplate.update(sql, parameters);
    		
    		// Get actual    		
    	    List<Long> actual = PostService.Post_tagsService.findBy_Post(id_Post);
    	    
    		// Insert new
    		for (Long id_Tag : tags) {
    			if (actual.indexOf(id_Tag) == -1){
    				PostService.Post_tagsService.insert(id_Post, id_Tag);
    			}
    		}
    		
    	}
    	

    	public static void insert(Long id_Post, Long id_Tag) {
    		Post.Post_tags obj = new Post.Post_tags();
			Long id = jdbcTemplate.queryForObject("select max(_id) FROM Post_tags", new MapSqlParameterSource(), Long.class);
			obj.set_id(id == null ? 1 : id + 1);
			
			String sql = "INSERT INTO Post_tags (`_id`, `id_Post`, `id_Tag` )	VALUES (:id, :id_Post, :id_Tag)";

			MapSqlParameterSource parameters = new MapSqlParameterSource()
				.addValue("id", obj.get_id())
				.addValue("id_Post", id_Post)
				.addValue("id_Tag", id_Tag);

			jdbcTemplate.update(sql, parameters);
    	}

    }
	

    
    /*
     * CUSTOM SERVICES
     * 
     *	These services will be overwritten and implemented in PostService.java
     */
    

}
